import { createRouter, createWebHistory } from "vue-router";
import { useAuthStore } from "@/stores/authStore";
import { useDeviceStore } from "@/stores/deviceStore";

// ‚úÖ ‡πÉ‡∏ä‡πâ Dynamic Import (Lazy Loading)
const MainLayout = () => import(/* webpackChunkName: "layout-main" */ "@/layouts/MainLayout.vue");
const Dashboard = () => import(/* webpackChunkName: "dashboard" */ "@/pages/Dashboard.vue");
const Login = () => import(/* webpackChunkName: "login" */ "@/pages/Login.vue");
const Watering = () => import(/* webpackChunkName: "watering" */ "@/pages/Watering.vue");
const Devices = () => import(/* webpackChunkName: "devices" */ "@/pages/Devices.vue");
const Commands = () => import(/* webpackChunkName: "commands" */ "@/pages/Commands.vue");
const Account = () => import(/* webpackChunkName: "account" */ "@/pages/Account.vue");
const SettingProgram = () => import(/* webpackChunkName: "setting-program" */ "@/pages/SettingProgram.vue");


const routes = [
  {
    path: "/login",
    name: "Login",
    component: Login,
    beforeEnter: (to, from, next) => {
      const authStore = useAuthStore();
      if (authStore.isLoggedIn) {
        return next("/dashboard");
      }
      next();
    },
  },
  {
    path: "/",
    component: MainLayout,
    meta: { requiresAuth: true },
    children: [
      { path: "", redirect: "/dashboard" },
      { path: "dashboard", name: "Dashboard", component: Dashboard },
      { path: "watering", name: "Watering", component: Watering },
      { path: "devices", name: "Devices", component: Devices },
      { path: "commands", name: "Commands", component: Commands },
      { path: "account", name: "Account", component: Account },
      {
        path: "watering/program/:index",
        name: "SettingProgram",
        component: SettingProgram,
        props: true,
      },
    ],
  },
  // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ 404 ‡πÉ‡∏ô Nginx
  { path: "/:pathMatch(.*)*", name: "NotFound", redirect: "/dashboard" },
];

const router = createRouter({
  history: createWebHistory(), // ‚úÖ ‡πÉ‡∏ä‡πâ History Mode (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ config Nginx ‡∏î‡πâ‡∏ß‡∏¢)
  routes,
});

// ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô redirect loop ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
router.beforeEach(async (to, from, next) => {
  const authStore = useAuthStore();
  const deviceStore = useDeviceStore();

  try {
    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î User & Token ‡∏à‡∏≤‡∏Å Local Storage (‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
    if (!authStore.token) {
      await authStore.loadUserFromStorage();
    }

    // ‚ùå ‡∏ñ‡πâ‡∏≤ Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí Logout ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
    if (authStore.isTokenExpired) {
      console.warn("‚ö†Ô∏è Token expired, logging out...");
      authStore.logout();

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ `/login` ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á Redirect ‡∏ã‡πâ‡∏≥
      if (to.path !== "/login") {
        return next("/login");
      }
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤ Login ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ `/login` ‚Üí ‡πÉ‡∏´‡πâ‡πÑ‡∏õ Dashboard ‡πÅ‡∏ó‡∏ô
    if (to.path === "/login" && authStore.isLoggedIn) {
      console.log("üîÑ Already logged in, redirecting to Dashboard...");
      return next("/dashboard");
    }

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Device ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î)
    if (authStore.isLoggedIn && !deviceStore.isLoaded) {
      console.log("üöÄ Loading user devices...");
      await deviceStore.loadUserDevices(authStore.email, authStore.token);
      deviceStore.isLoaded = true;
    }

    // ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Login ‡πÅ‡∏ï‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Page ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Auth ‚Üí Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
    if (to.meta.requiresAuth && !authStore.isLoggedIn) {
      console.warn("üö´ Unauthorized access, redirecting to Login...");
      return next("/login");
    }

    // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    next();
  } catch (error) {
    console.error("‚ùå Error in navigation guard:", error);
    next("/login"); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login loop
  }
});

export default router;
