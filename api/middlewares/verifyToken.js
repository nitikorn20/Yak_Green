import jwt from 'jsonwebtoken'

const verifyToken = (req, res, next) => {
  try {
    // ‚úÖ ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Header
    const authHeader = req.header('Authorization')
    if (!authHeader) {
      return res.status(401).json({ error: 'Access denied. No token provided.' })
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Token ‡∏°‡∏µ "Bearer " ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const token = authHeader.startsWith('Bearer ') ? authHeader.split(' ')[1] : authHeader
    if (!token) {
      return res.status(401).json({ error: 'Access denied. Invalid token format.' })
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Token
    const verified = jwt.verify(token, process.env.JWT_SECRET)
    req.user = verified // üëâ ‡∏ú‡∏π‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà `req.user`

    next() // ‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  } catch (error) {
    res.status(403).json({ error: 'Invalid or expired token' }) // üö® ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  }
}

export default verifyToken
