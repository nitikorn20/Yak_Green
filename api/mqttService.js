import mqtt from "mqtt";
import dotenv from "dotenv";
import LogData from "./models/Logs.js";
import Device from "./models/Hardware.js"; // Import Model ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
import connectDB from "./config/db.js"; // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
import path from "path";
import { fileURLToPath } from "url";

// ‡πÅ‡∏õ‡∏•‡∏á __dirname ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô ES Module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå .env
const envPath = path.resolve(__dirname, "../.env"); // ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö `docker-compose.yml`
console.log("üü¢ Loading .env from:", envPath);

dotenv.config({ path: envPath });

await connectDB(); // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
console.log("‚úÖ Connected to MongoDB");

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MQTT Broker
const MQTT_BROKER_URL =
  process.env.MQTT_BROKER_URL || "wss://yakgreen.farmbird.live:8883/mqtt";

// ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT Broker
const client = mqtt.connect(MQTT_BROKER_URL);
const subscribedDevices = new Set(); // ‡πÉ‡∏ä‡πâ Set ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà Subscribe ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏á

// ‚úÖ Mapping `status_code` ‚Üí `detail_status`
const STATUS_MAP = {
  1: "Valve ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
  2: "Valve ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
  3: "‡πÄ‡∏õ‡∏¥‡∏î Valve ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
  4: "‡∏õ‡∏¥‡∏î Valve ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
  5: "‡∏Ç‡πâ‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Valve ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà",
  6: "User ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏î‡∏ô‡πâ‡∏≥",
};

client.on("connect", async () => {
  console.log(`‚úÖ Connected to MQTT Broker: ${MQTT_BROKER_URL}`);
  await subscribeToAllDevices(); // ‚úÖ Subscribe ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DB
});

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Subscribe ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Log ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
const subscribeToAllDevices = async () => {
  try {
    const devices = await Device.find({}, "serialNumber");

    devices.forEach((device) => {
      const logTopic = `server/${device.serialNumber}/post/log`;

      if (!subscribedDevices.has(device.serialNumber)) {
        client.subscribe(logTopic, (err) => {
          if (!err) {
            subscribedDevices.add(device.serialNumber);
            console.log(`üì° Subscribed to topic: ${logTopic}`);
          } else {
            console.error(`‚ùå Failed to subscribe to ${logTopic}:`, err);
          }
        });
      }
    });
  } catch (error) {
    console.error("‚ùå Error fetching devices from DB:", error);
  }
};

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á Interval ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
setInterval(async () => {
  console.log("üîÑ Checking for new devices...");
  await subscribeToAllDevices();
}, 30000);

// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å MQTT ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
client.on("message", async (topic, message) => {
  console.log(`üì© Received message from ${topic}:`, message.toString());

  try {
    const dataArray = JSON.parse(message.toString()); // ‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Array
    const topicParts = topic.split("/");

    if (
      topicParts.length < 4 ||
      topicParts[2] !== "post" ||
      topicParts[3] !== "log"
    ) {
      console.warn(`‚ö†Ô∏è Ignoring unknown topic format: ${topic}`);
      return;
    }

    const serialNumber = topicParts[1]; // ‚úÖ ‡∏î‡∏∂‡∏á serialNumber ‡∏à‡∏≤‡∏Å topic

    if (!Array.isArray(dataArray)) {
      console.warn(`‚ö†Ô∏è Expected array but got:`, dataArray);
      return;
    }

    for (const data of dataArray) {
      const existingLog = await LogData.exists({
        serialNumber,
        timestamp_hw: new Date(data.timestamp * 1000),
        status_code: data.status_code,
        valve_id: data.valve_id,
        program_index: data.program_index,
      });

      if (!existingLog) {
        const logEntry = new LogData({
          serialNumber,
          timestamp_server: new Date(),
          timestamp_hw: new Date(data.timestamp * 1000),
          status_code: data.status_code,
          detail_status: STATUS_MAP[data.status_code] || "Unknown Status", // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô save
          valve_id: data.valve_id || null,
          program_index: data.program_index || null,
        });

        await logEntry.save();
        console.log(`‚úÖ Log saved for ${serialNumber}:`, logEntry);
      } else {
        console.log(`‚ö†Ô∏è Duplicate log detected, skipping...`);
      }
    }
  } catch (error) {
    console.error("‚ùå Error processing MQTT message:", error);
  }
});

client.on("close", () => {
  console.warn("‚ö†Ô∏è MQTT Connection Closed");
});

// ‚úÖ Export client ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
export default client;
